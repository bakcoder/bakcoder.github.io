{"componentChunkName":"component---src-templates-blog-template-js","path":"/bakcoder-java-study/effective-java-item1/","result":{"data":{"cur":{"id":"152334ad-37da-5a2c-b794-322d31bb7178","html":"<blockquote>\n<h3 id=\"-목표\" style=\"position:relative;\"><a href=\"#-%EB%AA%A9%ED%91%9C\" aria-label=\" 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔔 목표</h3>\n<p>public 생성자가 아닌 정적 팩터리 메서드를 통해 객체를 반환하는 기법을 익히자</p>\n</blockquote>\n<hr>\n<h2 id=\"정적-팩터리-메서드란\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%9E%80\" aria-label=\"정적 팩터리 메서드란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 팩터리 메서드란?</h2>\n<ul>\n<li><code class=\"language-text\">정적 팩터리 메서드(static factory method)</code>란 인스턴스를 얻는 전통적인 수단인 public 생성자가 아닌\n<code class=\"language-text\">정적 메서드를 이용</code>하여 해당 클래스의 인스턴스를 반환하는 기법이다.</li>\n</ul>\n<h2 id=\"정적-팩터리-메서드의-장단점\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"정적 팩터리 메서드의 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 팩터리 메서드의 장단점</h2>\n<ul>\n<li>\n<p>장점</p>\n<ol>\n<li>이름을 가질 수 있다.(동일한 시그니처의 생성자는 두개 가질 수 없다.)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Customer</span> <span class=\"token function\">regularCustomer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Grade</span> grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Customer</span> <span class=\"token function\">vipCustomer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Grade</span> grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>호출될 때마다 인스턴트를 새로 생성하지 않아도 된다.(Boolean.valueOf)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Boolean</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> b <span class=\"token operator\">?</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span>TRUE <span class=\"token operator\">:</span> <span class=\"token class-name\">Boolea</span><span class=\"token punctuation\">.</span>FALSE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"note\"><pre class=\"language-note\"><code class=\"language-note\">  인스턴스 통제(instance-controlled) 클래스\n  tip 1. 열거 타입\n    - 인스턴스가 하나만 만들어짐을 보장한다.(싱글톤 패턴 구현 시 사용)\n    - Type-Safety 보장\n\n  tip 2. 플라이웨이트(Flyweight) 패턴\n    - 객체를 가볍게 만들어 메모리 사용을 줄이는 패턴</code></pre></div>\n<ol start=\"3\">\n<li>반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.(인터페이스 기반 프레임워크, 인터페이스에 정적 메소드)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStringList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strArrList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    strArrList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bakcoder\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> strArrList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"note\"><pre class=\"language-note\"><code class=\"language-note\">tip 3. 인터페이스에 정적 메소드(자바 8,9에서 인터페이스 변화)\n - 기본 메소드(구현체)와 정적 메소드를 가질 수 있다.\n   (자바 9는 private static 메소드도 가능)</code></pre></div>\n<ol start=\"4\">\n<li>입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.(EnumSet)</li>\n<li>정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다. (서비스 제공자 프레임워크)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"note\"><pre class=\"language-note\"><code class=\"language-note\">tip 4. 서비스 제공자 프레임워크 (ex. JDBC)\n  - 주요 구성 요소\n    a. 서비스 제공자 인터페이스(SPI)와 서비스 제공자 (구현체)\n    b. 서비스 제공자 등록 API : 서비스 인터페이스 구현체 등록\n    c. 서비스 접근 API : 클라이언트가 서비스 인터페이스 인스턴스를 가져올 때 사용\n\ntip 5. 리플렉션\n  - 클래스로더를 통해 읽어온 클래스 정보를 사용하는 기술\n  - 클래스 조회, 인스턴스 생성, 메소드 실행 등 가능\n    ex) Class&lt;?&gt;  studyClass = Class.forName(&quot;bakcoder.effective.java.Study&quot;);\n        Constructor&lt;?&gt; studyConstructor = studyClass.getConstructor();</code></pre></div>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>상속을 하려면 public이나 protected 생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위 클래스를 만들 수 없다.</li>\n<li>정적 팩터리 메서드는 프로그래머가 찾기 어렵다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<blockquote>\n<h3 id=\"-출처\" style=\"position:relative;\"><a href=\"#-%EC%B6%9C%EC%B2%98\" aria-label=\" 출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📚 출처</h3>\n<p>[인프런] 이펙티브 자바 완벽 공략 1부, 백기선</p>\n<p>[책] 이펙티브 자바, 조슈아 블로크</p>\n</blockquote>","excerpt":"🔔 목표 public 생성자가 아닌 정적 팩터리 메서드를 통해 객체를 반환하는 기법을 익히자 정적 팩터리 메서드란? 란 인스턴스를 얻는 전통적인 수단인 public 생성자가 아닌\n하여 해당 클래스의 인스턴스를 반환하는 기법이다. 정적 팩터리 메서드의 장단점 장점 이름을 가질 수 있다.(동일한 시그니처의 생성자는 두개 가질 수 없다.) 호출될 때마다 인스턴트를 새로 생성하지 않아도 된다.(Boolean.valueOf) 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.(인터페이스 기반 프레임워크, 인터페이스에 정적 메소드) 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.(EnumSet) 정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다. (서비스 제공자 프레임워크) 단점 상속을 하려면 public이나 protected 생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위 클래스를 만들 수 없다. 정적 팩터리 메서드는 프로그…","frontmatter":{"date":"October 27, 2022","title":"이펙티브 자바-Item 1. 생성자 대신 정적 팩터리 메서드를 고려하라.","categories":"Java","author":"바코더","emoji":"💻"},"fields":{"slug":"/bakcoder-java-study/effective-java-item1/"}},"next":{"id":"149b74d1-bcd6-5c5b-9df4-91175d392141","html":"<h2 id=\"드디어-시작되었다\" style=\"position:relative;\"><a href=\"#%EB%93%9C%EB%94%94%EC%96%B4-%EC%8B%9C%EC%9E%91%EB%90%98%EC%97%88%EB%8B%A4\" aria-label=\"드디어 시작되었다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>드디어 시작되었다.</h2>\n<blockquote>\n<p>나도 개발 블로그..?</p>\n</blockquote>\n<p>항상 미뤄왔었다.\n개발 공부는 꾸준함이 중요하다고 생각했고 내가 공부했던 지식들을 블로그를 통해 꾸준히 정리하면\n나는 한층 더 성장할 것이라 생각했지만…\n행동력이 부족한지라 미뤄왔었다.</p>\n<p>그래도 이제라도 시작하게 된 것을 다행으로 여기며 최대한 부지런하게 게시물을 찍어내려 한다.\n(잘할 수 있겠지? ㅎㅎ)</p>\n<p>블로그를 해야겠다는 생각을 하게 되면서 티스토리, 네이버, 깃헙 등 여러 블로그 서비스를 찾아보았지만\n가장 개발자스러운 것을 찾다보니 깃헙 블로그로 개설하게 되었다. (커밋 잔디도 늘릴 겸 좋은 것 같다.)</p>\n<p>템플릿은 <strong>줌코딩</strong> 님의 gatsby 템플릿이 너무 깔끔하고 맘에 들어 선택…(감사합니다🙇‍♂️)</p>\n<p>아무튼 블로그를 통해 높이 성장하길 바라며 오늘은 짧게… 이만✋</p>","frontmatter":{"date":"September 08, 2021","title":"블로그를 시작하며","categories":"일상","author":"바코더","emoji":"🏃🏻‍♂️"},"fields":{"slug":"/bakcoder-daily-life/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://bakcoder.github.io","comments":{"utterances":{"repo":"bakcoder/bakcoder.github.io"}}}}},"pageContext":{"slug":"/bakcoder-java-study/effective-java-item1/","nextSlug":"/bakcoder-daily-life/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}